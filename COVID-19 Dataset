#!/usr/bin/env python
# coding: utf-8

# In[2]:


#instalando as bibliotecas
import pandas as pd
import numpy as np
print('.')


# In[3]:


#carregando o arquivo
arq = pd.read_csv('C:\\Users\\victo\\OneDrive\\Área de Trabalho\\EAD\\Nias\\covid_19_clean_complete.csv')
arq.head


# In[4]:


#Letra A e B
print('Existem %d linhas e %d colunas'%(len(arq), len(arq.columns)))
print("As colunas são:")

for i in range (0,len(arq.columns)):
    print(arq.columns[i])


# In[5]:


#Letra C
arq.info()
#Os tipo de dado são os valores abaixo da coluna "Dtype"


# In[6]:


#Letra D e E
arq.Date = pd.to_datetime(arq.Date)
mean = arq.mean(numeric_only = None)
median = arq.median(numeric_only = None)
print(mean, '\n\n', median)
#Os números abaixo são as médias e medianas das colunas que são int ou float


# In[7]:


#Letra F
print('As colunas com valores vazios são:')
for i in range (0, len(arq.columns)):
    if arq.isna().any()[i]:
        print(arq.columns[i])


# In[8]:


prov_china = arq[arq['Country/Region'] == 'China']
prov_china.head()


# In[9]:


#N°2 Letra A
prov_china2 = prov_china['Province/State'].drop_duplicates(keep='first')
prov_china2.head


# In[10]:


#N°2 Letra B
list = ['Confirmed', 'Active', 'Deaths','Recovered']
prov_china2 = prov_china.loc[:,list]
prov_china2.head
#N°2 Letra D: A função a ser usada é .loc


# In[11]:


#N°2 Letra E
top5 = prov_china.sort_values('Confirmed', ascending=False).drop_duplicates('Province/State').head(5)
top5


# In[12]:


#N°3 Letra A
def sem_prov(l):
    if pd.notna(l['Province/State']):
        l['Country/Region'] = l['Country/Region'] + '_' + l['Province/State']
    return l


# In[13]:


#N°3 Letra B, C e D
arq_copia = pd.read_csv('C:\\Users\\victo\\OneDrive\\Área de Trabalho\\EAD\\Nias\\covid_19_clean_complete.csv')
arq_copia = arq_copia.apply(sem_prov, axis = 1)
arq_copia = arq_copia.drop(['Province/State'], axis = 1)


# In[15]:


#N° 4 Letra A e B
world = pd.read_csv('C:\\Users\\victo\\OneDrive\\Área de Trabalho\\EAD\\Nias\\worldometer_data.csv')
world = world[['Country/Region','Continent','Population']]
world.head()


# In[97]:


#N°4 Letra C e D
covid_19_clean_complete = pd.read_csv('C:\\Users\\victo\\OneDrive\\Área de Trabalho\\EAD\\Nias\\covid_19_clean_complete.csv')
covid_19_clean_complete.groupby(['Country/Region']).sum()
covid_world = covid_19_clean_complete.merge(world[['Country/Region','Population','Continent']],
                                            on = 'Country/Region')
covid_world


# In[39]:


#N°4 Letra E
covid_deaths = covid_world.groupby('Continent', as_index = False).sum()

covid_deaths['DeathsM'] = (covid_deaths['Deaths']/covid_deaths['Population'])*10**6
covid_deaths = covid_deaths.sort_values(by = 'DeathsM', ascending = False)
covid_deaths['Ranking'] =[x for x in range(1,len(covid_deaths)+1)]
covid_deaths = covid_deaths.set_index("Ranking")
covid_deaths


# In[41]:


#Exercício 5
import matplotlib.pyplot as plt
import seaborn as sns
get_ipython().run_line_magic('matplotlib', 'inline')


# In[61]:


covid_plt = arq.groupby(by = ['Date','WHO Region']).sum().reset_index(level = 'Date')
covid_plt.head()


# In[65]:


covid_plt.Date = pd.to_datetime(covid_plt.Date)
sns.set_style('whitegrid')


plt.plot('Date','Deaths', data = covid_plt.loc[covid_plt.index == "Eastern Mediterranean"]);
plt.plot('Date','Deaths', data = covid_plt.loc[covid_plt.index == "Europe"]);
plt.plot('Date','Deaths', data = covid_plt.loc[covid_plt.index == "Americas"]);
plt.xlabel('Date')
plt.ylabel('Deaths')
plt.legend(["Eastern Mediterranean",'Europe','Americas'])


# In[106]:


plt.figure(figsize =(10,6))
plt.bar(arq['WHO Region'],arq['Deaths']);
plt.title('Mortes por continente')
plt.ylabel("Mortes")


# In[164]:


world = pd.read_csv('C:\\Users\\victo\\OneDrive\\Área de Trabalho\\EAD\\Nias\\worldometer_data.csv')
world = world[['Continent','Deaths/1M pop','Population']].groupby('Continent',as_index = False).mean().sort_values('Deaths/1M pop', ascending= False)
world


# In[165]:


world = world.iloc[[0,1,2]]
world


# In[167]:


plt.scatter('Population','Deaths/1M pop', data = world.iloc[0])
plt.scatter('Population','Deaths/1M pop', data = world.iloc[1])
plt.scatter('Population','Deaths/1M pop', data = world.iloc[2])
plt.xlabel('Population *(10^7)')
plt.ylabel('Deaths/1M pop')
plt.legend(["South America",'Europe','North America'])


# In[178]:


world = pd.read_csv('C:\\Users\\victo\\OneDrive\\Área de Trabalho\\EAD\\Nias\\worldometer_data.csv')
world.corr()
plt.figure(figsize =(12,12))
sns.heatmap(world.corr(), cmap='mako')


# In[ ]:




